cmake_minimum_required(VERSION 3.5)
include(./CMakeUtils.cmake)

util_get_hostname(HOSTNAME)
util_get_basic_source_dir(${HOSTNAME} BASIC_SOURCE_DIR)

project(01-L-i-bin)

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)

if(COMPILE_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS -std=c++11}")
    #set(CMAKE_CXX_STANDARD 11) #第二种设置 std 标准的方法
elseif(COMPLIE_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS -std=c++0x}")
    #set(CMAKE_CXX_STANDARD 0x) #第二种设置 std 标准的方法
else()
    message(STATUS "The complier has no c++ support, please use a different compiler.")
endif()

add_executable(${PROJECT_NAME} ${BASIC_SOURCE_DIR}/L-cpp-standard/i-common-method/main.cpp)